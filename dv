diff --git a/Client/src/APIs/AuthApi.js b/Client/src/APIs/AuthApi.js
index 1818c68..1080169 100644
--- a/Client/src/APIs/AuthApi.js
+++ b/Client/src/APIs/AuthApi.js
@@ -4,22 +4,25 @@ export default  {
     user:{
 
         loginRequest : ( data ) => {
-
             return axios.post('/api/auth-post', { data }).then( response => response.data.userSignedInData )
         },
         // logoutRequest : (token) => {
-
         //     return axios.post('/api/logout-post', { token }).then( response => response.data.userLoggedOut )
         // },
         registerRequest:(data) => {
-
             return axios.post('/api/register-post', { data }).then( response => response.data.userRegistered )
         },
         forgotPasswordRequest: (data) => {
-
-            return axios.post('/api/forgotpassword-post', { data })/* .then( response => response.data); */
+            return axios.post('/api/forgotpassword-post', { data })
+        },
+        validateResetPasswordTokenRequest: (token) => {
+            return axios.post('/api/validateresetpasswordtoken-post', { token })
+        },
+        resetPasswordRequest: (data) => {
+            return axios.post('/api/resetpassword-post', { data }).then( response => response.data.userSignedInData )
         }
     },
+
     ///News Api
     newApi : {
         getNews : (url)=>{
diff --git a/Client/src/Components/Forms/RegisterForm.js b/Client/src/Components/Forms/RegisterForm.js
index 2302d04..9330a82 100644
--- a/Client/src/Components/Forms/RegisterForm.js
+++ b/Client/src/Components/Forms/RegisterForm.js
@@ -29,7 +29,9 @@ class RegisterForm extends React.Component {
         lastName: "",
 
         email: "",
+
         userPassword: "",
+        passwordConfirmation:'',
 
         country:"",
         city:"",
@@ -84,7 +86,7 @@ class RegisterForm extends React.Component {
     const errors = {}; // the errors var will be empty if we don`t have errors
     if (!Validator.isEmail(data.email)) errors.email = "Email is required";
     if (!data.userPassword) errors.userPassword = "Password is required";
-
+    if (data.userPassword !== data.passwordConfirmation) errors.userPassword = 'Password is not Matched!'
     return errors;
   };
 
@@ -134,6 +136,8 @@ class RegisterForm extends React.Component {
               <ErrorMessage text={this.state.errors.email} />
             )}
 
+            {this.state.errors.userPassword && <ErrorMessage text = {this.state.errors.userPassword}/>}
+
             <MDBInput
               className="text-dark"
               label="Your password"
@@ -144,10 +148,13 @@ class RegisterForm extends React.Component {
             />
 
             <MDBInput
-              className="text-dark"
-              label="Confirm password"
-              type="password"
-              //onChange={this.onChange}
+                     type = 'password' 
+                     id = 'passwordConfirmation' 
+                     className = 'text-dark'
+                     
+                     value = {this.state.data.passwordConfirmation} 
+                     onChange = {this.onChange}
+                     name = 'passwordConfirmation' 
             />
 
             {this.state.errors.userPassword && (
diff --git a/Client/src/Components/Forms/RestPasswordForm.js b/Client/src/Components/Forms/RestPasswordForm.js
deleted file mode 100644
index d927280..0000000
--- a/Client/src/Components/Forms/RestPasswordForm.js
+++ /dev/null
@@ -1,44 +0,0 @@
-import React, { Component } from 'react'
-
-export default class RestPasswordForm extends Component {
-    render() {
-        return (
-
-            <div className="card card-outline-secondary">
-
-                <div className="card-header">
-                    <h3 className="mb-0">Rest Password</h3>
-                </div>
-
-                <div className="card-body">
-
-                    <form className="form" role="form" autocomplete="off">
-
-
-                        <div className="form-group">
-                            <label for="inputPasswordNew">New Password</label>
-                            <input type="password" className="form-control" id="inputPasswordNew" required="" />
-                            <span className="form-text small text-muted">
-                                The password must be 8-20 characters, and must <em>not</em> contain spaces.
-                                        </span>
-                        </div>
-                        <div className="form-group">
-                            <label for="inputPasswordNewVerify">Verify</label>
-                            <input type="password" className="form-control" id="inputPasswordNewVerify" required="" />
-                            <span className="form-text small text-muted">
-                                To confirm, type the new password again.
-                                        </span>
-                        </div>
-                        <div className="form-group">
-                            <button type="submit" className="btn btn-ouline-success  float-right">Set</button>
-                        </div>
-
-                    </form>
-
-
-                </div>
-
-            </div>
-        )
-    }
-}
diff --git a/Client/src/Redux/Actions/auth.js b/Client/src/Redux/Actions/auth.js
index 4bcce30..a54c952 100644
--- a/Client/src/Redux/Actions/auth.js
+++ b/Client/src/Redux/Actions/auth.js
@@ -17,33 +17,27 @@ export  const userLoggedOut = () =>  {
     }
 }
 
-
 export const registerAction  = (data) => (dispatch) => {
 
     return api.user.registerRequest(data).then((response) => {
-
          localStorage.sCount = response.token 
          dispatch(userLoggedIn(response))
          registerdMessage = true
-
     })
 }
 export const loginAction  = (data) => (dispatch) => {
 
      return api.user.loginRequest(data).then((response) => {
-
          localStorage.sCount = response.token 
          dispatch(userLoggedIn(response))
          loggedinMessage = true
-
      })
 }
 
 export const logoutAction  = () => (dispatch) => {
-          
     // return api.user.logoutRequest(localStorage.sCount).then(res =>{
         localStorage.removeItem('sCount')
-       return dispatch(userLoggedOut())    
+        return dispatch(userLoggedOut())    
     // })/* catch(err => {   // just for testing!
         // console.log("auth.js")
         // dispatch(userLoggedOut())
@@ -51,12 +45,25 @@ export const logoutAction  = () => (dispatch) => {
 }
 
 export const forgotPasswordAction  = (data) => (dispatch) => {
-
-    return api.user.forgotPasswordRequest(data).then(response => {
-        console.log(response);
+    return api.user.forgotPasswordRequest(data).then(responsee => {
+        console.log(responsee);
    });
-   }
-   
+}
+
+export const validateResetPasswordTokenAction = (token) => () => {
+    return api.user.validateResetPasswordTokenRequest(token);
+};
+
+export const resetPasswordAction = (data) => (dispatch) => {
+    return api.user.resetPasswordRequest(data).then((response) => {
+        localStorage.sCount = response.token 
+        dispatch(userLoggedIn(response))
+        //loggedinMessage = true
+    })
+};
+
+
+
 export const authMessagesHandler = () => {
     if(loggedinMessage){
         return "loggedinMessage"
diff --git a/Client/src/Redux/Actions/favorite.js b/Client/src/Redux/Actions/favorite.js
index 2fb1329..159a638 100644
--- a/Client/src/Redux/Actions/favorite.js
+++ b/Client/src/Redux/Actions/favorite.js
@@ -36,7 +36,6 @@ export const removeFromFavoriteAction = (item) => {
     })
 }
 
-
 export const sendFromFavoriteToBasketAction = (item) => (dispatch) => {
     return BasketApi.basket.saveToBasketRequest(item).then(res => {
         dispatch(dispatchProductToBasketState(res.products));
diff --git a/Server/functions.js b/Server/functions.js
index f996113..7988c05 100644
--- a/Server/functions.js
+++ b/Server/functions.js
@@ -25,4 +25,23 @@ module.exports = {
     setPassword: (password) => {
         return bcryptjs.hashSync(password, 10)
     },
-}
\ No newline at end of file
+    generateResetPasswordUrl:(userId) => {
+
+       const generateResetPasswordToken = (userId) => {
+            return jwt.sign({
+                userId : userId
+                }, 
+                process.env.JWT_SECRET,
+                { expiresIn: '1h'}
+            )   
+        }
+
+        return `http://192.168.178.26:3000/reset-password-route/${generateResetPasswordToken(userId)}`;
+    }
+
+}
+
+
+
+
+  
\ No newline at end of file
